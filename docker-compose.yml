services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres_db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      # Paramètres d'optimisation PostgreSQL
      - POSTGRES_INITDB_ARGS=--data-checksums
      - PGDATA=/var/lib/postgresql/data/pgdata
      # Paramètres de performance
      - POSTGRES_HOST_AUTH_METHOD=md5
      - POSTGRES_SHARED_BUFFERS=${POSTGRES_SHARED_BUFFERS:-128MB}
      - POSTGRES_EFFECTIVE_CACHE_SIZE=${POSTGRES_EFFECTIVE_CACHE_SIZE:-512MB}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init:/docker-entrypoint-initdb.d
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - backend_network
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
    security_opt:
      - no-new-privileges:true
    user: postgres

  # Service de backup automatique programmé
  backup:
    image: postgres:15-alpine
    container_name: postgres_backup
    volumes:
      - ./backups:/backups
      - ./scripts:/scripts
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-7}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
    entrypoint: ["/scripts/entrypoint-backup.sh"]
    depends_on:
      - postgres
    networks:
      - backend_network
    restart: unless-stopped

networks:
  backend_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
