services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres_db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      # Paramètres d'optimisation PostgreSQL
      - POSTGRES_INITDB_ARGS=--data-checksums
      - PGDATA=/var/lib/postgresql/data/pgdata
      # Paramètres de performance
      - POSTGRES_HOST_AUTH_METHOD=md5
      - POSTGRES_SHARED_BUFFERS=${POSTGRES_SHARED_BUFFERS:-128MB}
      - POSTGRES_EFFECTIVE_CACHE_SIZE=${POSTGRES_EFFECTIVE_CACHE_SIZE:-512MB}
      - POSTGRES_MAX_CONNECTIONS=${POSTGRES_MAX_CONNECTIONS:-100}
      - POSTGRES_WORK_MEM=${POSTGRES_WORK_MEM:-4MB}
      - POSTGRES_MAINTENANCE_WORK_MEM=${POSTGRES_MAINTENANCE_WORK_MEM:-64MB}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init:/docker-entrypoint-initdb.d
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - backend_network
    deploy:
      resources:
        limits:
          cpus: "${POSTGRES_CPU_LIMIT:-1}"
          memory: "${POSTGRES_MEMORY_LIMIT:-1G}"
    security_opt:
      - no-new-privileges:true
    user: postgres
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - FOWNER
      - SETGID
      - SETUID

  # Service de backup automatique programmé
  backup:
    image: postgres:15-alpine
    container_name: postgres_backup
    volumes:
      - ./backups:/backups
      - ./scripts:/scripts
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-7}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
    entrypoint: ["/scripts/entrypoint-backup.sh"]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "256M"
    security_opt:
      - no-new-privileges:true

  # Interface Web d'administration de la base de données
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: postgres_admin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL:-admin@example.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD:-admin}
      - PGADMIN_CONFIG_SERVER_MODE=${PGADMIN_SERVER_MODE:-False}
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=${PGADMIN_MASTER_PASSWORD_REQUIRED:-False}
      - PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION=${PGADMIN_ENHANCED_COOKIE_PROTECTION:-True}
      # Paramètres pour la connexion automatique
      - PGADMIN_SERVER_JSON_FILE=/pgadmin4/servers.json
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./config/pgadmin/servers.json:/pgadmin4/servers.json:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend_network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "512M"
    healthcheck:
      test: ["CMD", "wget", "-O", "-", "http://localhost/misc/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true

  # Service Redis pour le cache et les données en mémoire
  redis:
    image: redis:7-alpine
    container_name: redis_cache
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD:-change_this_secure_password}
      --maxmemory ${REDIS_MAXMEMORY:-256mb}
      --maxmemory-policy ${REDIS_MAXMEMORY_POLICY:-allkeys-lru}
      --appendonly ${REDIS_APPENDONLY:-yes}
      --appendfsync ${REDIS_APPENDFSYNC:-everysec}
    healthcheck:
      test:
        [
          "CMD",
          "redis-cli",
          "-a",
          "${REDIS_PASSWORD:-change_this_secure_password}",
          "ping",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - backend_network
    deploy:
      resources:
        limits:
          cpus: "${REDIS_CPU_LIMIT:-0.5}"
          memory: "${REDIS_MEMORY_LIMIT:-512M}"
    security_opt:
      - no-new-privileges:true
    user: redis
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID

  # Interface de gestion Redis avec Redis Commander
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis_admin
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379:0:${REDIS_PASSWORD}
      - HTTP_USER=admin
      - HTTP_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "8089:8081"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - backend_network
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: "256M"
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "wget", "-O", "-", "http://localhost:8081"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

networks:
  backend_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/24
    driver_opts:
      com.docker.network.bridge.name: pg_net
      com.docker.network.driver.mtu: 1500

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  redis_data:
    driver: local
  redisinsight_data:
    driver: local
